Julia (Lia) Nelson
SoftDev pd1
K34 -- Another DB Perspective (MongoDB Chapter 4)
2022-05-08
time spent: 1.5 hours

QCC
-----------------------------------------------------------------
* Find all documents where the tripduration was less than or
  equal to 70 seconds and the usertype was not Subscriber:
  * db.trips.find({ "tripduration": { "$lte" : 70 },
                "usertype": { "$ne": "Subscriber" } }).pretty()
* Find all documents where the tripduration was less than or
  equal to 70 seconds and the usertype was Customer using a
  redundant equality operator:
  * db.trips.find({ "tripduration": { "$lte" : 70 },
                "usertype": { "$eq": "Customer" }}).pretty()
  * $gte (greater than or equal to)
  * $lt (less than or equal to)
  * $gt (greater than or equal to)
* Find all documents where the tripduration was less than or
  equal to 70 seconds and the usertype was Customer using the
  implicit equality operator:
  * db.trips.find({ "tripduration": { "$lte" : 70 },
                "usertype": "Customer" }).pretty()
* $ uses:
  * precedes MQL operators
    * Query operators give different ways to locate data
    * Comparison operators let us find data within range
    * Logic operators are $and, $or, $nor and $not (no xor)
      * Why would nor be present but not xor (since both can
        be constructed from prior operators)?
  * precedes Aggregation pipeline stages
  * allows field value access
* Find all documents where airplanes CR2 or A81 left or landed
  in the KZN airport:
  * db.routes.find({ "$and": [ { "$or" :[ { "dst_airport": "KZN" },
                                    { "src_airport": "KZN" }
                                  ] },
                          { "$or" :[ { "airplane": "CR2" },
                                     { "airplane": "A81" } ] }
                         ]}).pretty()
* There is an implict and that can be utilized when applying
  multiple conditions to the same field
* If have to different or queries will assume that or combines
  them unless explicit and
* $not can only work on one clause
* $expr allows the use of aggregation expressions within query
  language
  * also allows to use variables and conditional statements
  * allows comparison of different fields within document
* Aggregation syntax: {<operator>: {<field>, <value>}}
* MQL syntax: {<field>: {<operator>: <value>}}
* Find all documents with exactly 20 amenities which include all
  the amenities listed in the query array:
  * db.listingsAndReviews.find({ "amenities": {
                                  "$size": 20,
                                  "$all": [ "Internet", "Wifi",  "Kitchen",
                                           "Heating", "Family/kid friendly",
                                           "Washer", "Dryer", "Essentials",
                                           "Shampoo", "Hangers",
                                           "Hair dryer", "Iron",
                                           "Laptop friendly workspace" ]
                                         }
                            }).pretty()
  * without $all order matters
* $push turns field into array field if was not already
* Find all documents with exactly 20 amenities which include all
  the amenities listed in the query array, and display their price
  and address:
  * db.listingsAndReviews.find({ "amenities":
        { "$size": 20, "$all": [ "Internet", "Wifi",  "Kitchen", "Heating",
                                 "Family/kid friendly", "Washer", "Dryer",
                                 "Essentials", "Shampoo", "Hangers",
                                 "Hair dryer", "Iron",
                                 "Laptop friendly workspace" ] } },
                            {"price": 1, "address": 1}).pretty()
* Find all documents that have Wifi as one of the amenities only
  include price and address in the resulting cursor:
  * db.listingsAndReviews.find({ "amenities": "Wifi" },
                           { "price": 1, "address": 1, "_id": 0 }).pretty()
* Find all documents that have Wifi as one of the amenities only
  include price and address in the resulting cursor, also exclude
  ``"maximum_nights"``. **This will be an error:*
  * db.listingsAndReviews.find({ "amenities": "Wifi" },
                           { "price": 1, "address": 1,
                             "_id": 0, "maximum_nights":0 }).pretty()
* Can only mix 0s and 1s in projections to explicitly exclude
  _id (included by default)
=================================================================

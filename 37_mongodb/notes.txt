Julia (Lia) Nelson
SoftDev pd1
K34 -- Another DB Perspective (MongoDB Chapter 3)
2022-05-08
time spent: 1.3 hours

QCC
-----------------------------------------------------------------
* Can add a document with insert document button
  * Can edit with JSON notation or one field-value pair at a
    time
* Every document must have a unique _id
* ObjectId() gives default value for _id (but a different value
  can be specified)
* In field-value mode use tab or click to get to new field-value
  pair
* Duplicate key error given when attempt to add duplicate
  documents
  * Gives collection present and _id value
* mongoimport --uri="mongodb+srv://<username>:<password>@
  <cluster>.mongodb.net/sample_supplies" sales.json
  * adding --drop removes the whole collection before reinserting
  it
* Connect to Atlas cluster
  * mongo "mongodb+srv://m001-student:m001-mongodb-basics@sandbox.dgjkc.mongodb.net/admin"
* Navigate to the database that we need:
  * use sample_training
* Get a random document from the collection:
  * db.inspections.findOne()
* db.inspections.insert(<document>)
  * <document> encapsulated by {}
* MongoDB has schema validation functionality
  * Allows document structure to be enforced
* Insert three test documents
  * db.inspections.insert([ { "test": 1 }, { "test": 2 },
  { "test": 3 } ])
* Insert three test documents but specify the _id values:
  * db.inspections.insert([{ "_id": 1, "test": 1 },
    { "_id": 1, "test": 2 }, { "_id": 3, "test": 3 }])
* Insert multiple documents specifying the _id values, and using
  the "ordered": false option.
  * db.inspections.insert([{ "_id": 1, "test": 1 },
    { "_id": 1, "test": 2 }, { "_id": 3, "test": 3 }],
    { "ordered": false })
  * default "ordered" set to true
    * inserts documents in the order they are listed in array
    * will try to insert all of documents even if one causes
      error
* Creates collection for you if insert into one does not exist
* Can use collection database that does not exist yet
  * Will only be added to collections if given document(s)
* Can use edit button in data explorer to update documents
* Array of documents:
  * [ { "coat": "fur",
                    "type": "soft" },
                  { "defense": "claws",
                    "location": "paws",
                    "nickname": "murder mittens" } ]
* Update all documents in the zips collection where the city
  field is equal to "HUDSON" by adding 10 to the current value
  of the "pop" field.
  * db.zips.updateMany({ "city": "HUDSON" },
  { "$inc": { "pop": 10 } })
  * Can use $set instead of $inc to set value
    * Using $set with a field that does not exist adds field
  * Can use $push to add elements to arrays
  * Could also increment multiple fields with multiple
    specified amounts
* Can use updateOne() command to update a random document with
  attributes
* Can use delete button in data explorer to delete documents
* Delete all the documents that have test field equal to 1.
  * db.inspections.deleteMany({ "test": 1 })
* Delete one document that has test field equal to 3.
  * db.inspections.deleteOne({ "test": 3 })
* Drop the inspection collection.
  * db.inspection.drop()
* Removing all collections in a database removes database
* Find all documents with exactly 20 amenities which include all
  the amenities listed in the query array:
  * db.listingsAndReviews.find({ "amenities": {
                                  "$size": 20,
                                  "$all": [ "Internet", "Wifi",  "Kitchen",
                                           "Heating", "Family/kid friendly",
                                           "Washer", "Dryer", "Essentials",
                                           "Shampoo", "Hangers",
                                           "Hair dryer", "Iron",
                                           "Laptop friendly workspace" ]
                                         }
                            }).pretty()
* $push turns field into array field if was not already
=================================================================
